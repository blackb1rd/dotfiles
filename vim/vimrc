" file:     ~/.vimrc files
" author:   Prachya Saechua
" ----------------------------------------------------------------------------

if has("unix")
    set shell=/bin/bash
endif

if has("win64") || has("win32")
    " Window need to set runtimepath
    set rtp+=$HOME/.vim
endif

let g:ale_emit_conflict_warnings = 0

" PLUG {{{1
" -----------------------------
set nocompatible              " be iMproved, required

call plug#begin('~/.vim/bundle')

Plug 'AndrewRadev/switch.vim'
Plug 'Shougo/vimproc'
Plug 'Shougo/vinarise.vim'
Plug 'SirVer/ultisnips'
Plug 'Valloric/YouCompleteMe'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'blackb1rd/taglist.vim'
"Plug 'blackb1rd/vim-easytags'
Plug 'chrisbra/unicode.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'eagletmt/ghcmod-vim'
Plug 'easymotion/vim-easymotion'
Plug 'google/vim-searchindex'
Plug 'honza/vim-snippets'
Plug 'jaxbot/browserlink.vim'
Plug 'jodosha/vim-godebug'
Plug 'juneedahamed/vc.vim'
Plug 'majutsushi/tagbar'
Plug 'mbbill/undotree'
Plug 'mhinz/vim-signify'
Plug 'petRUShka/vim-opencl'
Plug 'rking/ag.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'suan/vim-instant-markdown'
Plug 'terryma/vim-multiple-cursors'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'tomtom/tlib_vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tsaleh/vim-tmux'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-scripts/a.vim'
Plug 'vim-scripts/abolish.vim'
Plug 'will133/vim-dirdiff'
Plug 'xolox/vim-misc'
Plug 'junegunn/gv.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" lint/formatter
Plug 'Yggdroot/indentLine'
Plug 'godlygeek/tabular'
Plug 'google/yapf', { 'rtp': 'plugins/vim', 'for': 'python' }
Plug 'junegunn/vim-easy-align'
Plug 'vim-syntastic/syntastic'
Plug 'w0rp/ale'

" language
Plug 'chr4/nginx.vim'
Plug 'elzr/vim-json'
Plug 'fatih/vim-go'
Plug 'groenewege/vim-less'
Plug 'hail2u/vim-css3-syntax'
Plug 'othree/html5-syntax.vim'
Plug 'pbrisbin/html-template-syntax'

" Theme
Plug 'dhruvasagar/vim-railscasts-theme'
Plug 'google/vim-colorscheme-primary'
Plug 'tomasr/molokai'


call plug#end()

set t_Co=256
if &diff
    colorscheme railscasts
else
    try
        colorscheme molokai
    catch /^Vim\%((\a\+)\)\=:E185/
        colorscheme desert
    endtry
endif
let g:rehash256 = 1

" GENERAL {{{1
" -----------------------------

" Genaral formatting
set tabstop=4
set shiftwidth=4
set linebreak
set nowrap
set textwidth=80
set wrapmargin=0
set whichwrap+=<,>,[,],h,l
set formatoptions=qn1

if has("nvim")
    set guicursor=n-v-c:block-Cursor/lCursor-blinkon1,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
endif


" Highligh unwanted whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$\| \+ze\t/

" Column width 80
set cc=80
hi ColorColumn ctermbg=lightblue guibg=lightblue

" searching
set ic
set hlsearch
set smartcase
set incsearch
let g:ag_prg="ag --vimgrep"

" editing
scriptencoding utf-8
if has("multi_byte")
    set encoding=utf-8
    if &termencoding == ""
        let &termencoding = &encoding
    endif
    set fileencodings=ucs-bom,utf-8,latin1
    let &listchars="tab:\u25B8 ,eol:\u00AC,trail:\u00b7,nbsp:\u2423"
endif
set list
set nrformats+=alpha
set pastetoggle=<leader>p

" folding
set foldenable
set foldmethod=marker
set foldmarker={{{,}}}
set foldcolumn=1
set backspace=indent,eol,start

if has("unix")
    " spelling
    set spelllang=en
    set spellfile=~/.vim/dict.add
    nnoremap <silent> <leader>sp :set spell!<CR>

    " dictionary
    set dictionary=~/.vim/dict.add
endif

" vim ui
set autoread
set autowrite
set showcmd
set title
set ruler
set cursorline
set shortmess=at
set hidden
set laststatus=2
set scrolloff=3
set wildmenu wildmode=list:longest,full
set completeopt=longest,menuone
set history=50
set confirm
set equalalways
set lazyredraw
set statusline=%<%F%m%r%h%w%y\ %{&ff}\ %{strftime(\"%c\",getftime(expand(\"%:p\")))}%=\ %l\,%c\ Ascii:%b\ Hex:%B\ %{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\"}\ %P

" number
set number
autocmd InsertEnter * set relativenumber    " Insert mode : change number to relativenumber
autocmd InsertLeave * set norelativenumber  " Leaving Insert mode : change relativenumber to norelativenumber

if has('mouse')
  set mouse=a
endif

set wildignore+=.hg,.git,.svn                  " version control
set wildignore+=*.aux,*.out,*.toc              " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg " images files
set wildignore+=*.a,*.o,*.obj,*.so,*.hi        " compiled object files
set wildignore+=*.pyc                          " python byte code
set wildignore+=*.spl                          " compiled spell lists

" backup
if has("win64") || has("win32")
    set dir=%TMP%\\
    set backupdir=%TMP%\backups\\
    set undodir=%TMP%\undo\\
else
    set dir=~/.vim/tmp//
    set backupdir=~/.vim/backups//
    set undodir=~/.vim/undo//
endif
set backup
set undofile

" AUTOCMDS {{{1
" ----------------------------
au VimLeave     * set guicursor=a:block-blinkon1
au VimResized   * exe "normal! \<c-w>="
au BufWritePost * if getline(1) =~ "^#!" | silent :!chmod +x <afile>

" MAPPINGS {{{1
" ----------------------------

" window movements
nnoremap <silent> <UP>    <C-w>-
nnoremap <silent> <DOWN>  <C-w>+
nnoremap <silent> <LEFT>  <C-w><
nnoremap <silent> <RIGHT> <C-w>>

" NERDTree
nnoremap <silent> <C-e> :NERDTreeToggle<CR>

" tabular config
noremap <silent> <leader>a= :Tabular /=<CR>
noremap <silent> <leader>a: :Tabular /[^:]\+:<CR>
noremap <silent> <leader>a, :Tabular /[^,]\+,<CR>

" fugative config
nnoremap <leader>gg :copen<CR>:Ggrep
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>

" set no hightlight search
nnoremap <silent> <leader>h :nohl<CR>

" ghc-mod config
nnoremap <silent> <leader>c :call toggle#ToggleList("Quickfix List", 'c')<CR>
nnoremap <silent> <leader>d :diffupdate<CR>
nnoremap <silent> <leader>hc :GhcModCheck<CR>
nnoremap <silent> <leader>hl :GhcModLint<CR>
nnoremap <silent> <leader>l :ls<CR>:b<space>

" Airline
nnoremap <silent> <leader>s :call AirToggle()<CR>

" ale
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" Signify
nnoremap <silent> <leader>sr :SignifyRefresh<CR>

" tagbar config
nnoremap <silent> <leader>tb :TagbarToggle<CR>

" taglist
nnoremap <silent> <leader>tl :TlistToggle<CR>

" untree config
nnoremap <silent> <leader>u :UndotreeToggle<CR>

" youcompleteme config
nnoremap <silent> <leader>y :YcmDiag<CR>

" strip trailing spaces
nnoremap <silent> <leader>w :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" map space to create/open/close fold
nnoremap <silent> <Space> @=(foldlevel('.')?'za':'l')<CR>
vnoremap <Space> zf

" bindings for building code
nnoremap <F5>   :make<CR>
nnoremap <S-F6> :!./"%"<CR>

" PLUGINS CONFIG {{{1
" ----------------------------

" set vim to download files with curl
let g:netrw_http_cmd  = "curl"
let g:netrw_http_xcmd = "-so"

" NERDTree config
let g:NERDTreeChDirMode     = 2
let g:NERDTreeIgnore        = ['\~$', '\.swp$', '\.o$', '\.hi$']
let g:NERDTreeSortOrder     = ['c$', 'cpp$', 'h$', '^__\.py$', '\/$', '*', '\~$']
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeMinimalUI     = 1
let g:NERDTreeDirArrows     = 1
let g:NERDTreeWinPos        = "right"
let g:NERDTreeQuitOnOpen    = 1

" Airline
if has("gui_running")
    if has ("win64") || has("win32")
        set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h10
    else
        set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 10
    endif
endif
let g:airline_powerline_fonts = 1
let s:airline_toggle_with_noshowmode = 0
let g:airline#extensions#tabline#enabled = 1
function! AirToggle()
    if s:airline_toggle_with_noshowmode == 0
        let s:airline_toggle_with_noshowmode = 1
        AirlineToggle
        set showmode
    else
        let s:airline_toggle_with_noshowmode = 0
        AirlineToggle
        set noshowmode
    endif
endfunction
set noshowmode

" ale
let g:ale_sign_column_always = 1
let g:ale_sign_error = 'E>'
let g:ale_sign_warning = 'W>'
let g:airline#extensions#ale#enabled = 1
let g:ale_open_list = 1
let g:ale_keep_list_window_open = 1

let g:go_fmt_command = "goimports"

" syntastic
let g:syntastic_error_symbol = "\u2717"
let g:syntastic_warning_symbol = "\u26A0"
let g:syntastic_check_on_open = 1

" pandoc config
let g:pandoc_no_empty_implicits = 1
let g:pandoc_no_folding         = 1
let g:pandoc_use_hard_wraps     = 1

" utilsnips config
if has ("win64") || has("win32")
    let g:UltiSnipsSnippetsDir  = "bundle/snippets/UltiSnips"
else
    let g:UltiSnipsSnippetsDir  = "~/.vim/bundle/snippets/UltiSnips"
endif
let g:UltiSnipsExpandTrigger    = "<c-j>"

" youcompleteme config
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm/c_conf.py'
